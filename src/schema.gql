# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Club {
  id: Int!
  name: String!
  description: String
  url: String
  owner: User!
  members: [Shooter!]
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Shooter {
  id: Int!
  firstName: String!
  lastName: String!
  club: Club
  owner: User
  sport: Sport!
}

enum Sport {
  IDPA
  IPSC
  ThreeGun
  USPSA
}

type Stage {
  id: Int!
  name: String!
  attachments: [StageAttachment!]!
  paperTargets: [PaperTarget!]!
  noShooots: Int!
  popper: Int!
  walkthroughTime: Float!
  briefing: String!
  designer: User!
  createdAt: DateTime!
}

type StageAttachment {
  id: Int!
  fileId: String!
}

type PaperTarget {
  id: Int!
  name: String!
  requiredHits: Int!
}

type User {
  id: Int!
  email: String!
  name: String!
  shooters: [Shooter!]
  stages: [Stage!]
  createdAt: DateTime!
}

type Match {
  id: Int!
  name: String!
  description: String!
  url: String
  date: DateTime!
  finished: Boolean!
  hostClub: Club
  isPublic: Boolean!
  stages: [MatchStage!]!
  shooters: [MatchShooter!]!
  stuffs: [MatchStuff!]!
  sport: Sport!
  createdAt: DateTime!
}

type MatchStage {
  id: Int!
  match: Match!
  stage: Stage!
}

type MatchShooter {
  id: Int!
  match: Match!
  shooter: Shooter!
}

type MatchStuff {
  id: Int!
  match: Match!
  user: User!
  position: StuffPosition!
}

enum StuffPosition {
  RO
  CRO
  SO
  QM
  RM
  MD
}

type Query {
  user(id: Int!): User!
  users(skip: Int = 0, take: Int = 25): [User!]!
  login(email: String!, password: String!): String!
  whoAmI: User!
  shooter(id: Int!): Shooter!
  shooters(skip: Int = 0, take: Int = 25): [Shooter!]!
  clubs(skip: Int = 0, take: Int = 25): [Club!]!
  club(id: Int!): Club!
  stages(skip: Int = 0, take: Int = 25): [Stage!]!
  stage(id: Int!): Stage!
  match(id: Int!): Match!
  matches(skip: Int = 0, take: Int = 25): [Match!]!
}

type Mutation {
  createUser(name: String!, email: String!, password: String!): User!
  updateUser(id: Int!, name: String, email: String): Boolean!
  removeUser(id: Int!): Boolean!
  createShooter(firstName: String!, lastName: String!, owner: Int, sport: Sport!): Shooter!
  updateShooter(id: Int!, firstName: String, lastName: String, owner: Int, sport: Sport): Boolean!
  removeShooter(id: Int!): Boolean!
  createClub(name: String!, description: String, url: String, ownerId: Int!): Club!
  updateClub(id: Int!, name: String, description: String, url: String, ownerId: Int): Boolean!
  removeClub(id: Int!): Boolean!
  createStage(name: String!, briefing: String!, attachments: [String!]!, designer: Int!, noShooots: Int!, paperTargets: [CreateStagePaperTargetInput!]!, popper: Int!, walkthroughTime: Float!): Stage!
  updateStage(id: Int!, name: String, briefing: String, attachments: [String!], designer: Int, noShooots: Int, paperTargets: [CreateStagePaperTargetInput!], popper: Int, walkthroughTime: Float): Boolean!
  removeStage(id: Int!): Boolean!
  createMatch(url: String!, date: DateTime!, sport: Sport!, name: String!, description: String!, hostClub: Int, isPublic: Boolean!, stages: [Int!]!, shooters: [Int!]!, stuffs: [CreateMatchStuffInput!]!): Match!
  updateMatch(id: Int!, url: String, date: DateTime, sport: Sport, name: String, description: String, hostClub: Int, isPublic: Boolean, stages: [Int!], shooters: [Int!], stuffs: [CreateMatchStuffInput!]): Boolean!
  removeMatch(id: Int!): Boolean!
  finishMatch(id: Int!): Boolean!
}

input CreateStagePaperTargetInput {
  name: String!
  requiredHits: Int!
}

input CreateMatchStuffInput {
  user: Int!
  position: StuffPosition!
}

type Subscription {
  userAdded: User!
  userUpdated: Int!
  userRemoved: Int!
}